name: AI-Powered Code Review and Fix

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-review-and-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install Codacy CLI
        run: |
          curl -L https://github.com/codacy/codacy-cli/releases/latest/download/codacy-cli_linux_amd64 -o codacy-cli
          chmod +x codacy-cli
          sudo mv codacy-cli /usr/local/bin/
          codacy-cli --version

      - name: Analyze with Codacy
        id: codacy-analysis
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
          
        run: |
          cd "$GITHUB_WORKSPACE"
          mkdir -p src
          cd src
          echo "Current directory: $(pwd)"
          ls -la

          if javac Main.java; then
            echo "Compilation successful. No fixes needed."
            
            # Analyze with Codacy, even if compilation is successful
            codacy-cli analyze --project-token "$CODACY_PROJECT_TOKEN" --api-token "$CODACY_API_TOKEN" --format sarif --output results.sarif --max-allowed-issues 2147483647
            
            # Check if Codacy found issues
            if [ -s results.sarif ]; then
              echo "Codacy found issues. Check the SARIF report for details."
              echo "issues-found=true" >> $GITHUB_OUTPUT
            else
              echo "No issues found by Codacy."
              echo "issues-found=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "Compilation failed. Will attempt to fix with Codacy."

            # Analyze with Codacy to get fixes
            codacy-cli analyze --project-token "$CODACY_PROJECT_TOKEN" --api-token "$CODACY_API_TOKEN" --format sarif --output results.sarif --max-allowed-issues 2147483647

            # Check if Codacy found issues (it should in this case)
            if [ -s results.sarif ]; then
              echo "Codacy found issues and provided fixes. Check the SARIF report."
              echo "issues-found=true" >> $GITHUB_OUTPUT
            else
              echo "Codacy did not find any issues or fixes. Exiting."
              echo "issues-found=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Create Pull Request with Fixes
        if: steps.codacy-analysis.outputs.issues-found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd "$GITHUB_WORKSPACE"

          # Create a new branch for the fix
          git checkout -b fix-codacy-issues
          
          # Apply fixes from SARIF report using a custom script (see below)
          # python3 apply_sarif_fixes.py results.sarif src/Main.java  # You need to implement this script

          # Verify that the code compiles after applying fixes
          if cd src && javac Main.java; then
            echo "Code compiled successfully after applying Codacy fixes."
            
            # Add, commit, and push changes
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git add .
            git commit -m "Fix: Apply Codacy code improvements"
            git push origin fix-codacy-issues
            
            # Create a pull request
            gh pr create --base main --head fix-codacy-issues --title "Fix: Codacy Code Improvements" --body "This PR addresses issues found by Codacy."
          else
            echo "Compilation failed after applying Codacy fixes. Review manually."
            exit 1
          fi

      # - name: Apply SARIF Fixes (Example - Needs Implementation)
      #   if: steps.codacy-analysis.outputs.issues-found == 'true'
      #   shell: python
      #   run: |
      #     import json

      #     def apply_fixes(sarif_file, source_file):
      #         with open(sarif_file, 'r') as f:
      #             sarif_data = json.load(f)

      #         # (Implementation to parse SARIF and apply fixes goes here)
      #         # This is a placeholder. You need to implement the logic
      #         # to extract fixes from sarif_data and modify the source_file
      #         # accordingly.

      #         print(f"Applying fixes from {sarif_file} to {source_file}")

      #     # Example usage (assuming you are in the workspace root):
      #     apply_fixes("src/results.sarif", "src/Main.java")

